package com.jieming;

/**
 * https://blog.csdn.net/qq_50675319/article/details/126801340
 */
public class AboutMysqlLock {

    /*
    * 讲一下mysql的锁
    *   答：按照锁粒度分：
    *                  1 全局锁
    *                  2 表级锁
    *                  3 行锁
    *       按照锁类型分：
    *                  1 读锁 --共享锁或S锁
    *                  2 写锁 --排他锁或X锁
    *       按照锁与锁之间的关系：
    *                        1 兼容锁
    *                        2 排他锁
    *
    *      1 全局锁：对整个数据库实例加锁
    *              全局锁的应用场景：全局的逻辑备份
    *              效果：获得一致性视图，保证数据的完整性
    *        加锁操作：
    *             flush tables with read lock
    *             备份：
    *               mysqldump --single-transaction -uroot -p123456 itcast -> itcast.sql
    *               该语句应用在innodb引擎，--single-transaction参数来完成不加锁的一致性数据备份，对当前数据据生成一个快照，对快照进行备份
    *            释放锁：
    *               unlock tables
    *
    *      2 表级锁
    *        标记锁可以分为三类：
    *                       a 表锁
    *                       b 元数据锁
    *                       c 意向锁
    *            表锁：
    *                表共享读锁  加锁操作 lock tables 表名 read
    *                表独占写锁  加锁操作 lock tables 表名 write
    *                表共享读锁：
    *                        表共享读锁是一种读锁（共享锁），当客户端A为某张表加上了表共享读锁时，那么客户端A就只能对该表进行读操作，
    *                        如果进行写操作会报错；其他客户端也只能对该表进行读操作，如果进行了写操作则会被阻塞，
    *                        直到客户端A释放锁，写操作才能被执行。
    *
    *                表独占写锁：
    *                        表独占写锁是一种写锁（排他锁)，当客户端A为某张表加上了表独占写锁时，那么客户端A可以对该表进行读写操作；
    *                        其他客户端对该表的读写操作都会被阻塞，直到客户端A释放锁
    *            元数据锁：
    *                系统自动加，无需我们进行加锁操作。
    *                如果对表中数据进行操作 都是加的共享锁，包括共享读和共享写
    *                对表结构进行改变的锁都是家的排他锁
    *
    *            意向锁：
    *               当客户端对表表中某行加行锁的时候，也会对表加上意向锁
    *               意向锁：
    *                    意向共享锁IS：由语句select … lock in share mode添加。与表锁共享锁(read)兼容，与表锁排他锁(write)互斥
    *                    意向排他素IX：由insert、update、delete、select…for update添加。与表锁共享锁(read)及排他锁(write)都互斥，意向锁之间不会互斥。
    *
    *        3 行级锁：
    *               a 行锁
    *                    锁定单个行记录的锁，防止其他事务对此行进行update和delete。在RC、RR隔离级别下都支持。
    *               b 间隙锁
    *                      锁定索引记录间隙（不含该记录），确保索引记录间隙不变，防止其他事务在这个间隙进行insert，产生幻读。在RR隔离级别下都支持。
    *               c 临键锁
    *                      行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙Gap。 在RR隔离级别下支持
    *
    * */
}
